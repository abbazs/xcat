name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: xcat
            asset_name: xcat-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: xcat
            asset_name: xcat-linux-x86_64-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: xcat
            asset_name: xcat-linux-aarch64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: xcat
            asset_name: xcat-linux-armv7
          
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: xcat
            asset_name: xcat-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: xcat
            asset_name: xcat-macos-aarch64
          
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: xcat.exe
            asset_name: xcat-windows-x86_64.exe
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: xcat.exe
            asset_name: xcat-windows-i686.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        case "${{ matrix.target }}" in
          x86_64-unknown-linux-musl)
            sudo apt-get install -y musl-tools
            ;;
          aarch64-unknown-linux-gnu)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
          armv7-unknown-linux-gnueabihf)
            sudo apt-get install -y gcc-arm-linux-gnueabihf
            ;;
        esac

    - name: Configure cross-compilation
      if: matrix.os == 'ubuntu-latest'
      run: |
        case "${{ matrix.target }}" in
          aarch64-unknown-linux-gnu)
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            ;;
          armv7-unknown-linux-gnueabihf)
            echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            ;;
        esac

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-${{ matrix.target }}-
          ${{ runner.os }}-target-

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        case "${{ matrix.target }}" in
          x86_64-unknown-linux-musl|x86_64-unknown-linux-gnu)
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
            ;;
          aarch64-unknown-linux-gnu)
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
            ;;
          armv7-unknown-linux-gnueabihf)
            arm-linux-gnueabihf-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
            ;;
          *-apple-darwin)
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
            ;;
        esac

    - name: Create archive
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/
          cd dist
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/
          cd dist
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          dist/${{ matrix.asset_name }}.tar.gz
          dist/${{ matrix.asset_name }}.zip
        if-no-files-found: ignore

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Generate release notes
      id: release_notes
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
        # Generate changelog since last tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$TAG$" | head -n1)
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "## Changes since $PREVIOUS_TAG" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$TAG >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "" >> release_notes.md
          echo "First release of xcat - Extended cat with tree visualization and clipboard integration." >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Linux" >> release_notes.md
        echo "- **x86_64 (glibc)**: \`xcat-linux-x86_64.tar.gz\`" >> release_notes.md
        echo "- **x86_64 (musl)**: \`xcat-linux-x86_64-musl.tar.gz\`" >> release_notes.md
        echo "- **ARM64**: \`xcat-linux-aarch64.tar.gz\`" >> release_notes.md
        echo "- **ARMv7**: \`xcat-linux-armv7.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### macOS" >> release_notes.md
        echo "- **Intel (x86_64)**: \`xcat-macos-x86_64.tar.gz\`" >> release_notes.md
        echo "- **Apple Silicon (ARM64)**: \`xcat-macos-aarch64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Windows" >> release_notes.md
        echo "- **x86_64**: \`xcat-windows-x86_64.exe.zip\`" >> release_notes.md
        echo "- **x86 (32-bit)**: \`xcat-windows-i686.exe.zip\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the appropriate binary for your system" >> release_notes.md
        echo "2. Extract the archive (Linux/macOS) or zip file (Windows)" >> release_notes.md
        echo "3. Make the binary executable: \`chmod +x xcat\` (Linux/macOS)" >> release_notes.md
        echo "4. Move to a directory in your PATH: \`sudo mv xcat /usr/local/bin/\` (Linux/macOS)" >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_notes.outputs.tag }}
        name: Release ${{ steps.release_notes.outputs.tag }}
        body_path: release_notes.md
        files: |
          release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-binaries:
    name: Test Binary
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: xcat-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: xcat-macos-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: xcat-windows-x86_64.exe

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: test-binary

    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd test-binary
        tar -xzf ${{ matrix.artifact_name }}.tar.gz
        chmod +x xcat
        ./xcat --help

    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd test-binary
        7z x ${{ matrix.artifact_name }}.zip
        ./xcat.exe --help